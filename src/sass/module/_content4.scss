@use "global" as *;


.content4 {

}

.content4__wrap {
  display: flex;
  justify-content: center;
  align-items: center;

  position: relative;
  width: 100%;

  @include mq(md) {
    display: block;
  }
}

.content4__img {
  aspect-ratio: 600 / 400;
  max-width: rem(600);
  width: 100%;
  object-fit: cover;
  position: absolute;
  left: 0;
  // z-index: -10;

  @include mq(md) {
    max-width: none;
    position: relative;
    left: auto;
  }
}

.content4__img img {
  aspect-ratio: 600 / 400;
  max-width: rem(600);
  width: 100%;
  object-fit: cover;

  @include mq(md) {
    max-width: none;
  }
}

.content4__body {
  aspect-ratio: 635 / 243;
  max-width: rem(635);
  width: 100%;
  background: $color-white;
  padding-top: rem(60);
  padding-bottom: rem(40);  // 最低限を指定
  padding-inline: rem(70);
  // box-shadow: rem(5) rem(6) 0 rgba(230, 233, 239, 0.6);  // 影 box-shadow: [横方向のズレ] [縦方向のズレ] [ぼかし具合] [色];

  position: relative;

  margin-left: auto;
  z-index: 30;

  @include mq(md) {
    aspect-ratio: auto;
    max-width: none;
    padding-top: rem(25);
    padding-bottom: rem(20);
    padding-inline: rem(25);
  }
}

// .content4__body::before {  // 影のz-indexを調整するために、背景を擬似要素『before』で表現
//   content: "";
//   width: 100%;
//   height: 100%;
//   background: $color-white;

//   position: absolute;
//   inset: 0;

//   @include mq(md) {

//   }
// }

// .content4__body::after {  // 影を擬似要素で表現 (普通の影なら『box-shadow』で良いが、影と他の要素を『乗算』で表現して欲しいとの事だったから、擬似要素で実装。)
//   content: "";
//   aspect-ratio: 635 / 243;
//   max-width: rem(635);
//   width: 100%;
//   height: 100%;
//   background: rgba(230, 233, 239, 0.6);
//   // box-shadow: 0 0 0 rgba(230, 233, 239, 0.6);  // 影 box-shadow: [横方向のズレ] [縦方向のズレ] [ぼかし具合] [色];
//   mix-blend-mode: multiply; // 影が「乗算」で背景と合成される設定

//   position: absolute;
//   bottom: rem(-6);
//   right: rem(-5);
//   z-index: -1;
//   transform: translateZ(0); // GPUレンダリングを有効化しつつ、スタッキング順を維持

//   @include mq(md) {
//     bottom: rem(-4);
//     right: rem(-3);
//   }
// }

.content4__shadow-left {  // 影を要素で作成 → ※アニメーションを付与したせいでz-indexがバグるので、『.content4__wrap』の子要素として影をつける形に変更。(そのせいで、左右のコンテンツで影の位置を分けて制御する必要あり)
  aspect-ratio: 635 / 243;
  max-width: rem(635);
  width: 100%;
  height: 100%;
  background: rgba(230, 233, 239, 0.6);
  mix-blend-mode: multiply; // 影が「乗算」で背景と合成される設定

  position: absolute;
  bottom: rem(-6);
  left: rem(5);
  z-index: 10;

  @include mq(md) {
    bottom: rem(-4);
    left: rem(3);

    display: none;
  }
}

.content4__shadow-right {  // 影を要素で作成 → ※アニメーションを付与したせいでz-indexがバグるので、『.content4__wrap』の子要素として影をつける形に変更。(そのせいで、左右のコンテンツで影の位置を分けて制御する必要あり)
  aspect-ratio: 635 / 243;
  max-width: rem(635);
  width: 100%;
  height: 100%;
  background: rgba(230, 233, 239, 0.6);
  mix-blend-mode: multiply; // 影が「乗算」で背景と合成される設定

  position: absolute;
  bottom: rem(-6);
  right: rem(-5);
  z-index: 10;

  @include mq(md) {
    bottom: rem(-4);
    right: rem(-3);

    display: none;
  }
}

.content4__title {
  text-align: center;
  font-size: rem(22);
  font-weight: $bold;
  color: #181818;
  padding-bottom: rem(18);
  border-bottom: 1px solid #686f81;

  @include mq(md) {
    font-size: rem(18);
    padding-bottom: rem(14);
  }
}

.content4__text {
  margin-top: rem(30);
  font-size: rem(17);
  font-weight: $normal;
  color: $color-font-base-1;
  line-height: 1.8;
  text-align: left;

  @include mq(md) {
    margin-top: rem(20);
    font-size: rem(14);
    line-height: 1.75;
  }
}

.content4__btn {
  margin-top: rem(35);
  display: block;
  width: fit-content;
  margin-left: auto;

  @include mq(md) {
    margin-top: rem(10);
  }
}




// =======================================
// モディファイア
// =======================================
// content4--reverse (テキストと画像の配置が逆)
.content4.content4--reverse {

}

.content4--reverse .content4__body {
  margin-left: 0;
  margin-right: auto;
}

.content4--reverse .content4__img {
  left: auto;
  right: 0;
}
